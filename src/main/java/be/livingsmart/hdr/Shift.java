/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package be.livingsmart.hdr;

import java.io.Serializable;
import java.sql.Date;
import java.sql.Time;
import java.util.Map;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 *  {@link Shift} contains the date, start- and endtime for the {@link Shift}. Contains multiple orders and shiftItems. ShiftItems are stored seperately to easily generate excel sheets so that class doesn't have to loop through a big list of {@link OrderBean}s and {@link OrderedItem}s
 * @author Pieter
 */
@Entity
@Table
public class Shift implements Serializable 
{
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    
    @Column(name = "date", nullable = false)
    private Date currentDate;
    
    @Column(name = "startTime", nullable = false)
    private Time startTime;
    
    @Column(name = "endTime", nullable = true)
    private Time endTime;
    
    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="supervisor")
    private UserBean supervisor; 
    
    @OneToMany(mappedBy="shift", fetch = FetchType.EAGER)
    @MapKey(name="id")
    private Map<Long, OrderBean> orders;
    
    @OneToMany(mappedBy="shift", fetch = FetchType.EAGER)
    @MapKey(name="shiftItemId")
    private Map<Long, ShiftItem> shiftItems;

    /**
     *  Returns the id, a {@link Long} generated by jpa
     * @return {@link Long}
     */
    public Long getId() {
        return id;
        
    }

    /**
     *  Sets the id ({@link Long} generated by jpa)
     * @param id    {@link Long}
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     *  Gets the currentDate ({@link Date}, normally this is set automatically by be.livingsmart.eindwerk.ShiftController
     * @return  {@link Date}
     */
    public Date getCurrentDate() {
        return currentDate;
    }

    /**
     *  Sets the currentDate ({@link Date}, normally this is done automatically by be.livingsmart.eindwerk.ShiftController
     * @param currentDate {@link Date}
     */
    public void setCurrentDate(Date currentDate) {
        this.currentDate = currentDate;
    }

    /**
     *  Returns the {@link Time} when the {@link Shift} was created
     * @return  {@link Time}
     */
    public Time getStartTime() {
        return startTime;
    }

    /**
     *  Sets the {@link Time} for when the {@link Shift} was created, this is usually done automatically by be.livingsmart.eindwerk.ShiftController
     * @param startTime {@link Time}
     */
    public void setStartTime(Time startTime) {
        this.startTime = startTime;
    }

    /**
     *  Returns the {@link Time} for when the {@link Shift} was ended
     * @return  {@link Time}
     */
    public Time getEndTime() {
        return endTime;
    }

    /**
     *  Sets the {@link Time} for when the {@link Shift} was ended, this is usually done automatically by be.livingsmart.eindwerk.ShiftController
     * @param endTime   {@link Time}
     */
    public void setEndTime(Time endTime) {
        this.endTime = endTime;
    }

    /**
     *  Returns the supervisor ({@link UserBean}) that supervised the active {@link Shift}
     * @return  {@link UserBean}
     */
    public UserBean getSupervisor() {
        return supervisor;
    }

    /**
     *  Sets the supervisor ({@link UserBean}) that supervised the active {@link Shift}
     * @param supervisor    {@link UserBean}
     */
    public void setSupervisor(UserBean supervisor) {
        this.supervisor = supervisor;
    }

    /**
     *  Returns a {@link Map} with a {@link Long} as keys and an {@link OrderBean} as values.
     * @return {@link Map}
     */
    public Map<Long, OrderBean> getOrders() {
        return orders;
    }

    /**
     *  Sets the {@link Map} with {@link Long} as keys and {@link OrderBean} as values. {@link OrderBean}s were created in case the application would be upgraded to be able to delete {@link OrderBean}s during a shift 
     * @param orders    {@link Map}
     */
    public void setOrders(Map<Long, OrderBean> orders) {
        this.orders = orders;
    }

    /**
     *  Adds an {@link OrderBean} to the {@link Map} 
     * @param order {@link OrderBean}
     */
    public void addOrder(OrderBean order) {
        this.orders.put(order.getId(), order);
    }

    /**
     *  Returns all {@link ShiftItem}s for this {@link Shift}, the {@link Long} is the id from the {@link ShiftItem}
     * @return  {@link Map}
     */
    public Map<Long, ShiftItem> getShiftItems() {
        return shiftItems;
    }

    /**
     *  Sets the {@link ShiftItem}s in the {@link Map} for this {@link Shift}
     * @param shiftItems    {@link Map}
     */
    public void setShiftItems(Map<Long, ShiftItem> shiftItems) {
        this.shiftItems = shiftItems;
    }
    
    

    
    
    
}
